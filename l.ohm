l {
	Program =
		Expression end	-- expression
		| Statements end	-- statement
	Expression = ExpressionLabeled
	ExpressionLabeled =
		Label ExpressionFunction	-- labeled
		| ExpressionFunction
	ExpressionFunction =
		Expression "=>" ExpressionConditional	-- function
		| ExpressionConditional
	ExpressionConditional = ExpressionConditional "?" ExpressionConditional ":" ExpressionConditional	-- conditional
		| ExpressionOr
	ExpressionOr =
		ExpressionOr "|" ExpressionAnd	-- or
		| ExpressionAnd
	ExpressionAnd =
		ExpressionAnd "&" ExpressionNot	-- and
		| ExpressionNot
	ExpressionNot =
		"!" ExpressionNot	-- not
		| ExpressionRelation
	ExpressionRelation =
		ExpressionRelation ("<="|"="|">="|"<"|"!="|">") ExpressionAdd	-- relation
		| ExpressionAdd
	ExpressionAdd =
		ExpressionAdd ("+"|"-") ExpressionMultiply	-- add
		| ExpressionMultiply
	ExpressionMultiply =
		ExpressionMultiply ("*"|"/") ExpressionAddUnary	-- multiply
		| ExpressionAddUnary
	ExpressionAddUnary =
		("+"|"-") ExpressionAddUnary	-- add
		| ExpressionCall
	ExpressionCall =
		ExpressionMember ExpressionCall	-- call
		| ExpressionMember
	ExpressionMember =
		ExpressionMember "." identifier	-- property
		| ExpressionMember "@" ExpressionAtom	-- element
		| ExpressionAtom
	ExpressionObject = "{" ListOf<ExpressionObjectProperty, ","> "}"
	ExpressionObjectProperty = identifier ":" Expression
	ExpressionArray = "[" ListOf<Expression, ","> "]"
	ExpressionTuple = "{" ListOf<Expression, ","> "}"
	ExpressionAtom =
		"(" Expression ")"	-- parentheses
		| "(" Statements ")"	-- statement
		| "%" identifier "%"	-- placeholder
		| ExpressionObject
		| ExpressionArray
		| ExpressionTuple
		| ExpressionName
		| undefined
		| null
		| false
		| true
		| number
		| string
	ExpressionName = identifier
	identifier = ~(("let" | "var" | "goto" | "while" | "do" | "break") ~(alnum|"_")) &(letter|"_") (alnum|"_")+
	undefined = "#undefined"
	null = "#null"
	false = "#false"
	true = "#true"
	number = digit+
	string = "\"" char* "\""
	char = ~("\""|"\\") any	-- literal
		| "\\" ("\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v")	-- escaped
	Statements = (Statement | Label)*
	Label = identifier ":"
	Statement =
		StatementAssign
		| StatementVar
		| StatementBlock
		| StatementGoto
		| StatementExpression
		| StatementWhile
		| StatementBreak
		| "%" identifier "%"	-- placeholder
	StatementAssign = "let" Expression ";"
	StatementVar = "var" identifier ";"
	StatementBlock = "{" Statements "}"
	StatementGoto = "goto" identifier ";"
	StatementExpression = Expression ";"
	StatementWhile = "while" Expression "do" Statement
	StatementBreak = "break" ";"
}