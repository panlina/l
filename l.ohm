l {
	Program =
		Expression end	-- expression
		| Statement* end	-- statement
	Expression = ExpressionFunction
	ExpressionFunction =
		"=>" ExpressionConditional	-- function
		| ExpressionConditional
	ExpressionConditional = ExpressionConditional "?" ExpressionConditional ":" ExpressionConditional	-- conditional
		| ExpressionOr
	ExpressionOr =
		ExpressionOr "|" ExpressionAnd	-- or
		| ExpressionAnd
	ExpressionAnd =
		ExpressionAnd "&" ExpressionNot	-- and
		| ExpressionNot
	ExpressionNot =
		"!" ExpressionNot	-- not
		| ExpressionRelation
	ExpressionRelation =
		ExpressionRelation ("<="|"="|">="|"<"|"!="|">") ExpressionAdd	-- relation
		| ExpressionAdd
	ExpressionAdd =
		ExpressionAdd ("+"|"-") ExpressionMultiply	-- add
		| ExpressionMultiply
	ExpressionMultiply =
		ExpressionMultiply ("*"|"/") ExpressionAddUnary	-- multiply
		| ExpressionAddUnary
	ExpressionAddUnary =
		("+"|"-") ExpressionAddUnary	-- add
		| ExpressionCall
	ExpressionCall =
		ExpressionMember ExpressionCall	-- call
		| ExpressionMember
	ExpressionMember =
		ExpressionMember "." identifier	-- property
		| ExpressionMember "@" ExpressionAtom	-- element
		| ExpressionAtom
	ExpressionObject = "{" ListOf<ExpressionObjectProperty, ","> "}"
	ExpressionObjectProperty = identifier ":" Expression
	ExpressionArray = "[" ListOf<Expression, ","> "]"
	ExpressionTuple = "{" ListOf<Expression, ","> "}"
	ExpressionAtom =
		"(" Expression ")"	-- parentheses
		| "(" Statement* ")"	-- statement
		| "%" identifier "%"	-- placeholder
		| ExpressionObject
		| ExpressionArray
		| ExpressionTuple
		| ExpressionName
		| number
		| string
	ExpressionName = identifier
	identifier = ~(("let" | "var") ~(alnum|"_")) &(letter|"_") (alnum|"_")+
	number = digit+
	string = "\"" char* "\""
	char = ~("\""|"\\") any	-- literal
		| "\\" ("\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v")	-- escaped
	Statement = StatementAssign | StatementVar | StatementBlock | StatementExpression
		| "%" identifier "%"	-- placeholder
	StatementAssign = "let" Expression ";"
	StatementVar = "var" identifier ";"
	StatementBlock = "{" Statement* "}"
	StatementExpression = Expression ";"
}